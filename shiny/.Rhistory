a
a<- quarterbs %>% filter(ticker == 'A') %>% select(quarter.end, long.term.debt)
a
gvisHistogram(a)
runApp()
runApp('~/Michael Cho/Coding Notes/R/HW/shiny_dashboard')
gvisHistogram(state_stat[,Population, drop=FALSE])
gvisHistogram(state_stat[,'Population', drop=FALSE])
gvisHistogram(state_stat[,'Population', drop=FALSE])
runApp('~/Michael Cho/Coding Notes/R/HW/shiny_dashboard')
runApp()
library(plotly)
plot_ly(x = a$quarter.end, y= a$long.term.debt, type = 'bar')
packageVersion('plotly')
#a
#ggplot(aes(x= quarter.end, y = shares.split.adjusted)) + geom_bar(stat='identity')
plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
runApp()
update.packages('plotly')
library(plotly)
install.packages('jsonlite')
install.packages('jsonlite')
install.packages("jsonlite")
shiny::runApp()
colnames(quarterbs)
colnames(quarterbs)[-1]
colnames(quarterbs)[c(-1,-12,-13,-14)]
runApp()
runApp()
runApp()
quarterbs %>% filter(ticker == 'AAPL')
quarterbs %>% filter(ticker == 'AAPL') %>% select(company_name)
quarterbs %>% filter(ticker == 'AAPL') %>% select(company_name)[1]
quarterbs %>% filter(ticker == 'AAPL') %>% select(company_name)
unique(quarterbs %>% filter(ticker == 'AAPL') %>% select(company_name))
unique(quarterbs %>% filter(ticker == 'AAPL') %>% select(company_name))[1]
quarterbs %>% filter(ticker == 'AAPL') %>% select(company_name)[,1]
quarterbs %>% filter(ticker == 'AAPL') %>% select(company_name)[1,]
a<- quarterbs %>% filter(ticker == 'AAPL')
a
a$company_name
a$company_name[1]
runApp()
colnames(quartercf)
colnames(quarteris)
runApp()
colnames(yearis)[c(-1,-8,-9,-10)]
colnames(yearis)
colnames(yearco)
runApp()
colnames(yearis)
colnames(yearsbsa)
colnames(yearbsa)
colnames(yearbs)
#year statements
yearbs <- yearco[c(1:12,53,54)]
colnames(yearbs)
colnames(yearcf)
runApp()
colnames(yearmetrics)
runApp()
runApp()
runApp()
runApp()
yearmetrics %>% filter(ticker == 'AAPL')
yearco %>% filter(ticker == 'AAPL')
View(yearco %>% filter(ticker == 'AAPL'))
runApp()
corrplot(cor(yearco),order = 'hclust')
library(corrplot)
corrplot(cor(yearco),order = 'hclust')
sapply(yearco)
sapply(yearco,class)
colnames(yearco)
corrplot(cor(yearco[3:52]),order = 'hclust')
corrplot(cor(yearco[3:52]))
corrplot(cor(yearco[28:52]))
corrplot(cor(yearco[28:52]), order = 'hclus')
corrplot(cor(yearco[28:52]), order = 'hclust')
runApp()
colnames(quartermetrics)
runApp()
runApp()
colnames(quarterco)
runApp()
runApp('~/Michael Cho/Coding Notes/R/HW/shiny_dashboard')
runApp()
install.packages(rsconnect)
install.packages('rsconnect')
library(rsconnect)
setwd("C:/Users/mjdch/Desktop/stockpup/shiny")
rsconnect::deployApp("C:/Users/mjdch/Desktop/stockpup/shiny")
rsconnect::setAccountInfo(name='michaelcho',
token='246A79071396DC2F3DCE3D1A5C3F7FB9',
secret='<SECRET>')
rsconnect::setAccountInfo(name='michaelcho',token='246A79071396DC2F3DCE3D1A5C3F7FB9',secret='<SECRET>')
rsconnect::setAccountInfo(name='michaelcho',token='246A79071396DC2F3DCE3D1A5C3F7FB9',secret='qs+0ImyGEbiTp1bi52Y9Zet3r3puxswxGK7zKOVv')
library(rsconnect)
library('rsconnect')
library(rsconnect)
rsconnect::deployApp("C:/Users/mjdch/Desktop/stockpup/shiny")
install.packages(openssl)
install.packages('openssl')
install.packages("openssl")
rsconnect::deployApp("C:/Users/mjdch/Desktop/stockpup/shiny")
rsconnect::deployApp("C:/Users/mjdch/Desktop/stockpup/shiny")
rsconnect::deployApp("C:/Users/mjdch/Desktop/stockpup/shiny")
shiny::runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
pts = -3 + (1:600)/100
ggplot() +
geom_line(aes(x=pts, y=dnorm(pts)))
pts
dnorm(pts)
rnorm(10)
data = rnorm(100000)
ggplot() + geom_histogram(
aes(x=data), color="red", fill="yellow"
) + theme_bw()
ggplot() + geom_histogram(
aes(x=data), bins = 10, color="red", fill="yellow"
) + theme_bw()
ggplot() + geom_histogram(
aes(x=data, y= ..density.. ),
bins = 10, color="red", fill="yellow"
) + theme_bw()
data = runif(100000)
ggplot() + geom_histogram(
aes(x=data), bins = 50, color="red", fill="yellow"
) + theme_bw()
n1=20; n2=30
sample_size = 20000
X1 = sapply(1:sample_size, function(x){ rchisq(1, n1)  })
X2 = sapply(1:sample_size, function(x){ rchisq(1, n2)  })
X1[1:5]
X2[1:5]
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
pts = -3 + (1:600)/100
ggplot() +
geom_line(aes(x=pts, y=dnorm(pts)))
data = rnorm(100000)
ggplot() + geom_histogram(
aes(x=data), color="red", fill="yellow"
) + theme_bw()
ggplot() + geom_histogram(
aes(x=data), bins = 10, color="red", fill="yellow"
) + theme_bw()
ggplot() + geom_histogram(
aes(x=data, y= ..density.. ),
bins = 10, color="red", fill="yellow"
) + theme_bw()
data = runif(100000)
ggplot() + geom_histogram(
aes(x=data), bins = 50, color="red", fill="yellow"
) + theme_bw()
data = rchisq(100000, df = 20)
ggplot() + geom_histogram(
aes(x=data), bins = 50, color="red", fill="yellow"
) + theme_bw()
data = rf(100000, df1 = 50, df2=40)
ggplot() + geom_histogram(
aes(x=data), bins = 50, color="red", fill="yellow"
) + theme_bw()
data = runif(100000)
ggplot() +
geom_histogram(aes(x=data), bins=50, fill="yellow", alpha= 0.7) +
geom_histogram(aes(x=data + 2), bins=50, fill="green", alpha= 0.7)
n = 300
sample_size = 10000
data = as.data.frame(
sapply(1:sample_size, function(x){runif(n)})
)
data[, 1:4]
avgs = colSums(data)/n
avgs[1:4]
ggplot() +
geom_histogram(aes(x=avgs))
mu = 0.5
var = 1/12
ref = rnorm(sample_size, mean=mu, sd=sqrt(var/n))
df = data.frame(
value = c(avgs, ref),
group=rep(c("simu", "ref"), each=sample_size)
)
ggplot(data=df) +
geom_histogram(aes(x=value, fill=group), bins=30, alpha= 0.5) +
facet_grid(group~.)
n = 300
sample_size = 10000
dgf = 10
data = as.data.frame(
sapply(1:sample_size, function(x){rchisq(n, df=dgf)})
)
data[, 1:5]
hist(as.numeric(data[1,]))
avgs = colSums(data)/n
avgs[1:5]
mu = dgf
var = 2*dgf
ref = rnorm(sample_size, mean=mu, sd=sqrt(var/n))
df = data.frame(
value = c(avgs, ref),
group=rep(c("simu", "ref"), each=sample_size)
)
ggplot(data=df) +
geom_histogram(aes(x=value, fill=group), bins=30, alpha= 0.5) +
facet_grid(group~.)
n = 300
sample_size = 10000
dgf1=30; dgf2=20
data = as.data.frame(
sapply(1:sample_size, function(x){rf(n, dgf1, dgf2)})
)
data[, 1:5]
hist(as.numeric(data[1,]))
avgs = colSums(data)/n
mu = dgf2/(dgf2 - 2)
var = 2*dgf2^2*(dgf1+dgf2-2)/dgf1/(dgf2-2)^2/(dgf2-4)
ref = rnorm(sample_size, mean=mu, sd=sqrt(var/n))
df = data.frame(
value = c(avgs, ref),
group=rep(c("simu", "ref"), each=sample_size)
)
ggplot(data=df) +
geom_histogram(aes(x=value, fill=group), bins=100, alpha= 0.5) +
facet_grid(group~.)
n = 30
sample_size = 10000
data = as.data.frame(
sapply(1:sample_size, function(x){ rnorm(n)  })
)
data[, 1:5]
hist(as.numeric(data[1,]))
SqSum = colSums(data*data)
SqSum[1:4]
ref = rchisq(sample_size, df = n)
df = data.frame(
value = c(SqSum, ref),
group=rep(c("simu", "ref"), each=sample_size)
)
ggplot(data=df) +
geom_histogram(aes(x=value, fill=group), bins=30, alpha= 0.5) +
facet_grid(group~.)
n1=20; n2=30
sample_size = 20000
X1 = sapply(1:sample_size, function(x){ rchisq(1, n1)  })
X2 = sapply(1:sample_size, function(x){ rchisq(1, n2)  })
X1[1:5]
X2[1:5]
hist(X1)
#The p-value for this test is 0.9739 meaning that, under the null hypothesis, we
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(heights, main = "Sample Distribution of Heights")
abline(h = 70, lwd = 2, lty = 2)
abline(h = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
dnorm(10)
dnorm(1)
dnorm(10)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
temp
temp %>% group_by(Gender) %>% ggplot(aes(x=Gender, y=Body.Temp)) + geom_boxplot()
temp
temp %>% group_by(Gender) %>% ggplot(aes(x=Gender, y=c(Body.Temp,Heart.Rate))) + geom_boxplot()
temp %>% group_by(Gender) %>% ggplot(aes(x=c(Body.Temp,Heart.Rate), class = Gender)) + geom_boxplot()
temp %>% group_by(Gender) %>% ggplot(aes(x=c(Body.Temp,Heart.Rate), fill = Gender)) + geom_boxplot()
temp %>% group_by(Gender) %>% ggplot(aes(x=Gender, y = c(Body.Temp,Heart.Rate), fill = Gender)) + geom_boxplot()
temp %>% group_by(Gender) %>% ggplot(aes(x=Gender, y = Body.Temp, fill = Gender)) + geom_boxplot()
temp %>% group_by(Gender) %>% ggplot(aes(x=Gender, y = Heart.Rate, fill = Gender)) + geom_boxplot()
temp %>% group_by(Gender) %>% ggplot(aes(x = Body.Temp, y= Heart.Rate, fill = Gender)) + geom_histogram()
temp %>% group_by(Gender) %>% ggplot(aes(x = Body.Temp, y= Heart.Rate, fill = Gender)) + geom_boxplot()
temp %>% group_by(Gender) %>% ggplot(aes(x = Body.Temp, y= Heart.Rate, fill = Gender)) + geom_point()
temp %>% group_by(Gender) %>% ggplot(aes(x = Body.Temp, y= Heart.Rate, fill = Gender)) + geom_point() + geom_smooth(method = 'lm')
temp %>% group_by(Gender) %>% ggplot(aes(x = Body.Temp, y= Heart.Rate, class = Gender)) + geom_point() + geom_smooth(method = 'lm')
temp %>% group_by(Gender) %>% ggplot(aes(x = Body.Temp, y= Heart.Rate, color = Gender)) + geom_point() + geom_smooth(method = 'lm')
temp %>% group_by(Gender) %>% ggplot(aes(x = Body.Temp, y= Heart.Rate, color = Gender)) + geom_point() + geom_smooth(method = 'lm') + facet_grid(.~Gender)
temp %>% group_by(Gender) %>% ggplot(aes(x=Gender, y = Body.Temp, fill = Gender)) + geom_boxplot()
temp %>% group_by(Gender) %>% ggplot(aes(x=Gender, y = Heart.Rate, fill = Gender)) + geom_boxplot()
temp %>% summarise(Body.Temp = mean(Body.Temp))
mean(temp$Body.Temp)
t.test(temp, mu = 98.6, alternative = two.sided)
t.test(temp, mu = 98.6, alternative = twosided)
t.test(temp, mu = 98.6, alternative = less)
t.test(temp, mu = 98.6, alternative = 'two.sided')
?t.test
t.test(temp, mu = 98.6, alternative = 'two.sided')
t.test(temp$Body.Temp, mu = 98.6, alternative = 'two.sided')
temp
temp %>% group_by(Gender) %>% ggplot(aes(x=Gender, y = Body.Temp, fill = Gender)) + geom_boxplot()
men = temp %>% group_by(Gender) %>% filter(Gender == 'Male')
women = temp %>% group_by(Gender) %>% filter(Gender == 'Female')
men$Body.Temp
t.test(men$Body.Temp, women$Body.Temp, alternative = 'two.sided')
t.test(temp$Body.Temp, mu = 98.6, alternative = 'two.sided')
t.test(men$Body.Temp, women$Body.Temp, alternative = 'two.sided')
?var
var(women$Heart.Rate)
#1.5
var(men$Heart.Rate)
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'two-sided')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'two.sided')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'two.sided')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'lower')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'greater')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'less')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'two.sided')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'greater')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'less')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'two.sided')
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'greater')
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'less')
var.test(women$Heart.Rate, men$Heart.Rate, alternative = 'less')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'two.sided')
var.test(women$Heart.Rate, men$Heart.Rate, alternative = 'greater')
#1.5
var.test(men$Heart.Rate, women$Heart.Rate, alternative = 'two.sided')
# on a two-sided F-test we can see the p-value of 0.01, we reject the null that the ratio of
#variances are equal to 1. we accept teh alternative that the variances are different by a ratio of .52 of men/women.
# we can say with 95% confidence the ratio between female and male variances are between .32 and .86.
var(men$Heart.Rate)
var(women$Heart.Rate)
iris
data("PlantGrowth")
plant = data('PlantGrowth')
plant
PlantGrowth
PlantGrowth
#1.1
PlantGrowth %>% ggplot(x=group, y = weight) + geom_boxplot()
#1.1
PlantGrowth %>% ggplot(aes(x=group, y = weight)) + geom_boxplot()
#1.1
PlantGrowth %>% ggplot(aes(x=group, y = weight, fill = group)) + geom_boxplot()
?bartlett.test
bartlett.test(weight~group, data = PlantGrowth)
bartlett.test(group~weight, data = PlantGrowth)
#2.2
bartlett.test(weight~group, data = PlantGrowth)
summary(aov(weight~group))
summary(aov(PlantGrowth$weight~PlantGrowth$group))
HairEyeColor
data(HairEyeColor)
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
read.table(HairEyeColor)
read.csv(HairEyeColor)
dataset::load
HairEyeColor$male
HairEyeColor$1
HairEyeColor
class(HairEyeColor)
read.table(HairEyeColor)
scan(HairEyeColor)
HairEyeColor
read.table(HairEyeColor, dec',')
read.table(HairEyeColor, sep = '\t'dec = ',')
read.table(HairEyeColor, sep = '\t',dec = ',')
as.data.frame(HairEyeColor, sep = '\t',dec = ',')
HairEyeColor
haireye = as.data.frame(HairEyeColor, sep = '\t',dec = ',')
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
mosaicplot(haireye, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
haireye
haireye %>% filter(eye = c('Brown','Blue'))
haireye %>% filter(eye == c('Brown','Blue'))
haireye %>% filter(eye == c('Brown','Blue'))
haireye
haireye %>% filter(Eye == c('Brown','Blue'))
HairEyeColor
HairEyeColor %>% filter(Eye == c('Brown','Blue'))
haireye
haireye %>% filter(Eye == c('Brown','Blue')) %>% mosaicplot(shade=T)
haireye %>% filter(Eye == c('Brown','Blue')) %>% as.table()
haireye %>% filter(Eye == c('Brown','Blue')) %>% as.data.table()
data.table(HairEyeColor)
haireye
haireye %>% filter(Eye == c('Brown','Blue')) %>% group_by(Sex) %>% summarise(freq = sum(Freq))
HairEyeColor
apply(HairEyeColor, c(1, 2), sum)
HairEyeColor
haireye = as.data.frame(HairEyeColor, sep = '\t',dec = ',')
mosaicplot(HairEyeColor, shade = TRUE)
#Category combinations that receive more observations (ordered from lowest to highest)
#Male and Female Blondes with Brown eyes
#Female Brunettes with Blue eyes
#female black=hared with blue eyes
#Male and Female Black-haired with Brown eyes
#Female Blondes with Blue eyes
haireye %>% filter(Eye == c('Brown','Blue'), Sex = 'Female') %>% group_by(Sex) %>% summarise(freq = sum(Freq))
haireye %>% filter(Eye == c('Brown','Blue'), Sex == 'Female')
haireye %>% filter(Eye == c('Brown','Blue'), Sex == 'Female') %>% mosaicplot()
haireye %>% filter(Eye == c('Brown','Blue'), Sex == 'Female')
haireye %>% filter(Eye == c('Brown','Blue'), Sex == 'Female') %>% select(-Sex)
haireye %>% filter(Eye == c('Brown','Blue'), Sex == 'Female') %>% select(-Sex) %>% mosaicplot()
haireye %>% filter(Eye == c('Brown','Blue'), Sex == 'Female') %>% select(-Sex) %>% mosaicplot(shade = T)
haireye %>% filter(Eye == c('Brown','Blue'), Sex == 'Female') %>% select(-Sex)
HairEyeColor
HairEyeColor[1]
HairEyeColor[Sex=='Female']
HairEyeColor[Sex='Female']
HairEyeColor$Sex
mosaicplot(HairEyeColor, shade = TRUE, margin = list(1:2, 3))
data(HairEyeColor)
force(HairEyeColor)
tableMargin(HairEyeColor, "Hair")
tableSlice(HairEyeColor, "Sex","Male")
install.packages('gRbase')
library(gRbase)
HairEyeColor[,5:10]
HairEyeColor[5,]
HairEyeColor[1,2,1]
HairEyeColor[Sex=Female,2,1]
HairEyeColor[Sex='Female',2,1]
HairEyeColor[Sex=='Female',2,1]
HairEyeColor[1,2,Sex=Female]
HairEyeColor[1,2,Sex='Female']
HairEyeColor[1,Eye = c(),Sex='Female']
HairEyeColor[1,Eye = c('Brown','Blue'),Sex='Female']
data(HairEyeColor)
HairEyeColor
HairEyeColor[,Eye = c('Brown','Blue'),Sex='Female'] %>% mosaicplot(shade=T)
female <- HairEyeColor[,Eye = c('Brown','Blue'),Sex='Female'] %>% mosaicplot(shade=T)
chisq.test(female)
female <- HairEyeColor[,Eye = c('Brown','Blue'),Sex='Female']\
female  %>% mosaicplot(shade=T)
chisq.test(female)
female  %>% mosaicplot(shade=T)
female <- HairEyeColor[,Eye = c('Brown','Blue'),Sex='Female']
female  %>% mosaicplot(shade=T)
chisq.test(female)
female
female  %>% mosaicplot(shade=T)
runApp()
industry_react() %>%
filter(industry.y %in% c(input$industry)) %>%
ggplot() +
geom_boxplot(aes_string(x=reorder('industry.y',input$industrymetric, median), fill = 'industry.y', y= input$industrymetric)) +
xlab("industry") +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90, hjust = 1))
industry_react()
runApp()
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
#1a Example numerical EDA.
summary(temp)
# We can also use str(),dim(),nrow(),ncol() to know the dataset
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
# use sapply: sapply(temp, sd)
cor(temp$Body.Temp, temp$Heart.Rate) # Bivariate methods
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
# what if we change prob = T? plot by frequency; we want to plot probability density here
lines(density(temp$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(temp$Heart.Rate), col = "red")
# bivariate density plot
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
lines(density(temp$Body.Temp[temp$Gender == "Male"]), col = "blue")
plot(density(temp$Heart.Rate[temp$Gender == "Male"]), col = "blue")
